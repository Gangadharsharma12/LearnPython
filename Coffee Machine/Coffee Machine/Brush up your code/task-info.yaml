type: edu
custom_name: stage6
files:
- name: machine/coffee_machine.py
  visible: true
  text: |
    water = 400
    milk = 540
    coffee_beans = 120
    disposable_cups = 9
    money = 550








    def remain(w,mi,cb,dc,m):

        print(

    f'''The coffee machine has:
    {w} ml of water
    {mi} ml of milk
    {cb} g of coffee beans
    {dc} disposable cups
    ${m} of money
    ''')




    def buy(w,mi,cb,dc,m):
        global water
        global milk
        global coffee_beans
        global disposable_cups
        global money
        choice = input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:")
        if choice == '1':
            while water >= 150 and milk >= 540 and coffee_beans >= 104 and disposable_cups != 0:
                print("I have enough resources, making you a coffee!")
                water = water - 250
                milk = milk - 0
                coffee_beans = coffee_beans - 16
                money = money + 4
                disposable_cups = disposable_cups - 1
                return water, milk, coffee_beans, money, disposable_cups
            else:
                print("Sorry, not enough water!")

        elif choice == '2':
            while water >= 350 and milk >= 465 and coffee_beans >= 100 and disposable_cups != 0:
                print("I have enough resources, making you a coffee!")
                water = water - 350
                milk = milk - 75
                coffee_beans = coffee_beans - 20
                money = money + 7
                disposable_cups = disposable_cups - 1
                return water, milk, coffee_beans, money, disposable_cups
            else:
                print("Sorry, not enough water!")



        elif choice == '3':
            while water >= 200 and milk >= 440 and coffee_beans >= 108 and disposable_cups != 0:
                print("I have enough resources, making you a coffee!")
                water = water - 200
                milk = milk - 100
                coffee_beans= coffee_beans - 12
                money += 6
                disposable_cups = disposable_cups  - 1
                return water, milk, coffee_beans, money, disposable_cups
            else:
                 print("Sorry, not enough water!")

        elif choice == "back":
            buy(water, milk, coffee_beans, disposable_cups, money)




    def fill(w, mi, cb, dc):
        global water
        global milk
        global coffee_beans
        global disposable_cups
        global money

        water_added = int(input("Write how many ml of water you want to add:"))
        milk_added = int(input("Write how many ml of milk you want to add:"))
        coffee_beans_added = int(input("Write how many grams of coffee beans you want to add:"))
        disposable_cups_added = int(input("Write how many disposable cups you want to add:"))
        water = w + water_added
        milk = mi + milk_added
        coffee_beans = cb + coffee_beans_added
        disposable_cups = dc + disposable_cups_added
        return water, milk, coffee_beans, disposable_cups


    def take(m):
        global money
        money -= m
        print(f'I gave you ${m}')
        #return money

    while True:
        action = input("write action (buy, fill ,take, remaining, exit)").lower()
        if action == "exit":
            break
        elif action == "buy":
            buy(water, milk, coffee_beans,disposable_cups, money)
        elif action == "remaining":
            remain(water, milk, coffee_beans, disposable_cups, money)
        elif action == "fill":
            fill(water, milk, coffee_beans, disposable_cups)
        elif action == "remaining":
            fill(water, milk, coffee_beans, disposable_cups, money)
        elif action == "take":
            take(money)
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 18 Jun 2022 06:07:09 UTC
record: 6
